{
  "version": 3,
  "sources": ["../src/shared/nav.ustils.ts", "../src/app/nav.ts", "../src/app.ts"],
  "sourcesContent": ["export interface ICloseIfOutsideClick {\n  element: HTMLElement;\n  elementButton: HTMLElement;\n  event: MouseEvent;\n  onClose?: () => void;\n}\n\nexport const closeIfOutsideClick = ({\n  element,\n  elementButton,\n  event,\n  onClose,\n}: ICloseIfOutsideClick) => {\n  const isClickInside =\n    element.contains(event.target as HTMLElement) ||\n    element === event.target ||\n    elementButton.contains(event.target as HTMLElement) ||\n    elementButton === event.target;\n  if (!isClickInside) {\n    element.classList.add(\"hidden\");\n    onClose && onClose();\n  }\n};\n\nexport const toggleMenu = (menuContainer: HTMLElement | null) => {\n  if (!menuContainer) return;\n  if (menuContainer.classList.contains(\"hidden\")) {\n    menuContainer.setAttribute(\"open\", \"true\");\n  } else {\n    menuContainer.removeAttribute(\"open\");\n  }\n  menuContainer.classList.toggle(\"hidden\");\n};\n", "import { closeIfOutsideClick, toggleMenu } from \"../shared/nav.ustils\";\n\nexport default function initNav() {\n  const mobileMenuContainer = document.getElementById(\"mobile-menu-container\");\n  const mobileMenuButton = document.getElementById(\"mobile-menu-button\");\n  const mobileMenuButtonIconClosed = document.getElementById(\n    \"mobile-menu-button-icon-closed\"\n  );\n  const mobileMenuButtonIconOpen = document.getElementById(\n    \"mobile-menu-button-icon-open\"\n  );\n\n  const toggleMobileMenuButtonIcon = () => {\n    mobileMenuButtonIconClosed?.classList.toggle(\"hidden\");\n    mobileMenuButtonIconOpen?.classList.toggle(\"hidden\");\n  };\n\n  const toggleMobileMenu = (evt: MouseEvent) => {\n    evt.stopPropagation();\n    toggleMenu(mobileMenuContainer);\n    toggleMobileMenuButtonIcon();\n  };\n\n  mobileMenuButton?.addEventListener(\"click\", toggleMobileMenu);\n  document.addEventListener(\"click\", (event) => {\n    event.stopPropagation();\n    if (mobileMenuContainer && mobileMenuButton) {\n      closeIfOutsideClick({\n        event,\n        element: mobileMenuContainer,\n        elementButton: mobileMenuButton,\n        onClose: toggleMobileMenuButtonIcon,\n      });\n    }\n  });\n}\n", "import initNav from \"./app/nav\";\n\ninitNav();\n"],
  "mappings": ";AAOO,IAAM,sBAAsB,CAAC;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA4B;AAC1B,QAAM,gBACJ,QAAQ,SAAS,MAAM,MAAqB,KAC5C,YAAY,MAAM,UAClB,cAAc,SAAS,MAAM,MAAqB,KAClD,kBAAkB,MAAM;AAC1B,MAAI,CAAC,eAAe;AAClB,YAAQ,UAAU,IAAI,QAAQ;AAC9B,eAAW,QAAQ;AAAA,EACrB;AACF;AAEO,IAAM,aAAa,CAAC,kBAAsC;AAC/D,MAAI,CAAC;AAAe;AACpB,MAAI,cAAc,UAAU,SAAS,QAAQ,GAAG;AAC9C,kBAAc,aAAa,QAAQ,MAAM;AAAA,EAC3C,OAAO;AACL,kBAAc,gBAAgB,MAAM;AAAA,EACtC;AACA,gBAAc,UAAU,OAAO,QAAQ;AACzC;;;AC9Be,SAAR,UAA2B;AAChC,QAAM,sBAAsB,SAAS,eAAe,uBAAuB;AAC3E,QAAM,mBAAmB,SAAS,eAAe,oBAAoB;AACrE,QAAM,6BAA6B,SAAS;AAAA,IAC1C;AAAA,EACF;AACA,QAAM,2BAA2B,SAAS;AAAA,IACxC;AAAA,EACF;AAEA,QAAM,6BAA6B,MAAM;AACvC,gCAA4B,UAAU,OAAO,QAAQ;AACrD,8BAA0B,UAAU,OAAO,QAAQ;AAAA,EACrD;AAEA,QAAM,mBAAmB,CAAC,QAAoB;AAC5C,QAAI,gBAAgB;AACpB,eAAW,mBAAmB;AAC9B,+BAA2B;AAAA,EAC7B;AAEA,oBAAkB,iBAAiB,SAAS,gBAAgB;AAC5D,WAAS,iBAAiB,SAAS,CAAC,UAAU;AAC5C,UAAM,gBAAgB;AACtB,QAAI,uBAAuB,kBAAkB;AAC3C,0BAAoB;AAAA,QAClB;AAAA,QACA,SAAS;AAAA,QACT,eAAe;AAAA,QACf,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;;;ACjCA,QAAQ;",
  "names": []
}
